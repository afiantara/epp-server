package da.inventory;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Vector;

import org.apache.log4j.Category;

import da.error.DAException;
import da.factory.DBEngine;

public class Produk {
	private DBEngine db=null;
	static final Category log = Category.getInstance(Produk.class);
	
	public Produk() throws DAException
	{
		db=new DBEngine();
		if(!db.connect()) throw new DAException("Could not connect to database");
	}
	
	public sf.inventory.Produk[] getProduk(String cmpType) throws DAException
	{
		sf.inventory.Produk[] items;// new Branch[count];
		try
		{
			
			String strSQL="SELECT * FROM " +  (cmpType.equals("EPP") ? "mproduk" : "wproduk") + " where recstatus<>?";
			PreparedStatement p=db.getStatement(strSQL);
			p.setString(1, "D");
			Vector rows = db.getData(p);
			int count=rows.size();
			items = new sf.inventory.Produk[count];
			for(int i=0; i < count;i++)
			{
				Vector v=(Vector)rows.get(i);
				sf.inventory.Produk item=new sf.inventory.Produk();
				item.setKbarang(v.get(0).toString());
				item.setNbarang(v.get(1).toString());
				item.setSatuan(v.get(2).toString());
				item.setPstatus(v.get(3).toString());
				item.setStockbal(v.get(4).toString());
				item.setKrak(v.get(5).toString());
				item.setKbarang1(v.get(6).toString());
				item.setKbarangp(v.get(7).toString());
				item.setDesc1(v.get(8).toString());
				item.setDesc2(v.get(9).toString());
				item.setDesc3(v.get(10).toString());
				item.setDesc4(v.get(11).toString());
				item.setDesc5(v.get(12).toString());
				item.setDesc6(v.get(13).toString());
				item.setDesc7(v.get(14).toString());
				item.setDesc8(v.get(15).toString());
				item.setDesc9(v.get(16).toString());
				item.setDesc10(v.get(17).toString());
				item.setKgroup(v.get(18).toString());
				item.setKgroup1(v.get(19).toString());
				item.setKgroup2(v.get(20).toString());
				item.setMinstock(Double.parseDouble(v.get(21).toString()));
				item.setMaxstock(Double.parseDouble(v.get(22).toString()));
				item.setHppnval(Double.parseDouble(v.get(23).toString()));
				item.setHppnval1(Double.parseDouble(v.get(24).toString()));
				item.setHppkval(v.get(25).toString());
				item.setHppkval1(v.get(26).toString());
				
				item.setRecstatus(v.get(27).toString());
				item.setTglupdate(Long.parseLong(v.get(28).toString()));
				item.setUserupdate(v.get(29).toString());
				item.setMaxDisc(Double.parseDouble(v.get(30).toString()));
				item.setPtype(v.get(31).toString());
				items[i] = item;
			}
		}
		catch(Exception ex)
		{
			throw new DAException (ex.getLocalizedMessage());
		}
		
		return items;
	}
	
	public sf.inventory.Produk[] getProdukChild(String cmpType) throws DAException
	{
		sf.inventory.Produk[] items;
		try
		{
			String strSQL="SELECT * FROM " +  (cmpType.equals("EPP") ? "mproduk" : "wproduk") + " where pstatus=? and recstatus<>?";
			PreparedStatement p=db.getStatement(strSQL);
			p.setString(1, "C");
			p.setString(2, "D");
			
			Vector rows = db.getData(p);
			int count=rows.size();
			items = new sf.inventory.Produk[count];
			for(int i=0; i < count;i++)
			{
				Vector v=(Vector)rows.get(i);
				sf.inventory.Produk item =new sf.inventory.Produk();
				item.setKbarang(v.get(0).toString());
				item.setNbarang(v.get(1).toString());
				item.setSatuan(v.get(2).toString());
				item.setPstatus(v.get(3).toString());
				item.setStockbal(v.get(4).toString());
				item.setKrak(v.get(5).toString());
				item.setKbarang1(v.get(6).toString());
				item.setKbarangp(v.get(7).toString());
				item.setDesc1(v.get(8).toString());
				item.setDesc2(v.get(9).toString());
				item.setDesc3(v.get(10).toString());
				item.setDesc4(v.get(11).toString());
				item.setDesc5(v.get(12).toString());
				item.setDesc6(v.get(13).toString());
				item.setDesc7(v.get(14).toString());
				item.setDesc8(v.get(15).toString());
				item.setDesc9(v.get(16).toString());
				item.setDesc10(v.get(17).toString());
				item.setKgroup(v.get(18).toString());
				item.setKgroup1(v.get(19).toString());
				item.setKgroup2(v.get(20).toString());
				item.setMinstock(Double.parseDouble(v.get(21).toString()));
				item.setMaxstock(Double.parseDouble(v.get(22).toString()));
				item.setHppnval(Double.parseDouble(v.get(23).toString()));
				item.setHppnval1(Double.parseDouble(v.get(24).toString()));
				item.setHppkval(v.get(25).toString());
				item.setHppkval1(v.get(26).toString());
				
				item.setRecstatus(v.get(27).toString());
				item.setTglupdate(Long.parseLong(v.get(28).toString()));
				item.setUserupdate(v.get(29).toString());
				item.setMaxDisc(Double.parseDouble(v.get(30).toString()));
				item.setPtype(v.get(31).toString());
				
				items[i]=item;
			}
		}
		catch(Exception ex)
		{
			throw new DAException (ex.getLocalizedMessage());
		}
		
		return items;
	}
	
	public sf.inventory.Produk getProduk(String kbarang,String cmpType) throws DAException
	{
		sf.inventory.Produk item=new sf.inventory.Produk();
		try
		{
			String strSQL="SELECT * FROM " +  (cmpType.equals("EPP") ? "mproduk" : "wproduk") + " where recstatus<>? and kbarang=?";
			PreparedStatement p=db.getStatement(strSQL);
			p.setString(1, "D");
			p.setString(2, kbarang);
			Vector rows = db.getData(p);
			int count=rows.size();
			for(int i=0; i < count;i++)
			{
				Vector v=(Vector)rows.get(i);
				
				item.setKbarang(v.get(0).toString());
				item.setNbarang(v.get(1).toString());
				item.setSatuan(v.get(2).toString());
				item.setPstatus(v.get(3).toString());
				item.setStockbal(v.get(4).toString());
				item.setKrak(v.get(5).toString());
				item.setKbarang1(v.get(6).toString());
				item.setKbarangp(v.get(7).toString());
				item.setDesc1(v.get(8).toString());
				item.setDesc2(v.get(9).toString());
				item.setDesc3(v.get(10).toString());
				item.setDesc4(v.get(11).toString());
				item.setDesc5(v.get(12).toString());
				item.setDesc6(v.get(13).toString());
				item.setDesc7(v.get(14).toString());
				item.setDesc8(v.get(15).toString());
				item.setDesc9(v.get(16).toString());
				item.setDesc10(v.get(17).toString());
				item.setKgroup(v.get(18).toString());
				item.setKgroup1(v.get(19).toString());
				item.setKgroup2(v.get(20).toString());
				item.setMinstock(Double.parseDouble(v.get(21).toString()));
				item.setMaxstock(Double.parseDouble(v.get(22).toString()));
				item.setHppnval(Double.parseDouble(v.get(23).toString()));
				item.setHppnval1(Double.parseDouble(v.get(24).toString()));
				item.setHppkval(v.get(25).toString());
				item.setHppkval1(v.get(26).toString());
				
				item.setRecstatus(v.get(27).toString());
				item.setTglupdate(Long.parseLong(v.get(28).toString()));
				item.setUserupdate(v.get(29).toString());
				item.setMaxDisc(Double.parseDouble(v.get(30).toString()));
				item.setPtype(v.get(31).toString());
			}
		}
		catch(Exception ex)
		{
			throw new DAException (ex.getLocalizedMessage());
		}
		
		return item;
	}
	
	public sf.inventory.Produk[] getProduk(String kbarang,String nbarang,String cmpType) throws DAException
	{
		sf.inventory.Produk[] items;// new Branch[count];
		try
		{
			String strSQL="SELECT * FROM " +  (cmpType.equals("EPP") ? "mproduk" : "wproduk") + " where recstatus<>?";
			if(kbarang.equals("") || nbarang.equals(""))
			{
				strSQL+=" and kbarang like ? or nbarang like ?";
			}
			else
				strSQL+=" and kbarang like ? and nbarang like ?";
			
			log.info("getProduk->" + strSQL + "[0]" + kbarang + ",[1]" + nbarang + ",[3]" + cmpType);
			PreparedStatement p=db.getStatement(strSQL);
			p.setString(1, "D");
			p.setString(2, kbarang + "%");
			p.setString(3, nbarang + "%");
			Vector rows = db.getData(p);
			int count=rows.size();
			items = new sf.inventory.Produk[count];
			for(int i=0; i < count;i++)
			{
				Vector v=(Vector)rows.get(i);
				sf.inventory.Produk item=new sf.inventory.Produk();
				item.setKbarang(v.get(0).toString());
				item.setNbarang(v.get(1).toString());
				item.setSatuan(v.get(2).toString());
				item.setPstatus(v.get(3).toString());
				item.setStockbal(v.get(4).toString());
				item.setKrak(v.get(5).toString());
				item.setKbarang1(v.get(6).toString());
				item.setKbarangp(v.get(7).toString());
				item.setDesc1(v.get(8).toString());
				item.setDesc2(v.get(9).toString());
				item.setDesc3(v.get(10).toString());
				item.setDesc4(v.get(11).toString());
				item.setDesc5(v.get(12).toString());
				item.setDesc6(v.get(13).toString());
				item.setDesc7(v.get(14).toString());
				item.setDesc8(v.get(15).toString());
				item.setDesc9(v.get(16).toString());
				item.setDesc10(v.get(17).toString());
				item.setKgroup(v.get(18).toString());
				item.setKgroup1(v.get(19).toString());
				item.setKgroup2(v.get(20).toString());
				item.setMinstock(Double.parseDouble(v.get(21).toString()));
				item.setMaxstock(Double.parseDouble(v.get(22).toString()));
				item.setHppnval(Double.parseDouble(v.get(23).toString()));
				item.setHppnval1(Double.parseDouble(v.get(24).toString()));
				item.setHppkval(v.get(25).toString());
				item.setHppkval1(v.get(26).toString());
				
				item.setRecstatus(v.get(27).toString());
				item.setTglupdate(Long.parseLong(v.get(28).toString()));
				item.setUserupdate(v.get(29).toString());
				item.setMaxDisc(Double.parseDouble(v.get(30).toString()));
				item.setPtype(v.get(31).toString());
				items[i]=item;
			}
		}
		catch(Exception ex)
		{
			throw new DAException (ex.getLocalizedMessage());
		}
		
		return items;
	}
	
	public sf.inventory.Produk[] getProdukByGroup(String kgroup,String cmpType) throws DAException
	{
		sf.inventory.Produk[] items;// new Branch[count];
		
		try
		{
			String strSQL="SELECT * FROM " +  (cmpType.equals("EPP") ? "mproduk" : "wproduk") + " where recstatus<>? and kgroup=?";
			PreparedStatement p=db.getStatement(strSQL);
			p.setString(1, "D");
			p.setString(2, kgroup);
			Vector rows = db.getData(p);
			int count=rows.size();
			items = new sf.inventory.Produk[count];
			for(int i=0; i < count;i++)
			{
				Vector v=(Vector)rows.get(i);
				sf.inventory.Produk item=new sf.inventory.Produk();
				item.setKbarang(v.get(0).toString());
				item.setNbarang(v.get(1).toString());
				item.setSatuan(v.get(2).toString());
				item.setPstatus(v.get(3).toString());
				item.setStockbal(v.get(4).toString());
				item.setKrak(v.get(5).toString());
				item.setKbarang1(v.get(6).toString());
				item.setKbarangp(v.get(7).toString());
				item.setDesc1(v.get(8).toString());
				item.setDesc2(v.get(9).toString());
				item.setDesc3(v.get(10).toString());
				item.setDesc4(v.get(11).toString());
				item.setDesc5(v.get(12).toString());
				item.setDesc6(v.get(13).toString());
				item.setDesc7(v.get(14).toString());
				item.setDesc8(v.get(15).toString());
				item.setDesc9(v.get(16).toString());
				item.setDesc10(v.get(17).toString());
				item.setKgroup(v.get(18).toString());
				item.setKgroup1(v.get(19).toString());
				item.setKgroup2(v.get(20).toString());
				item.setMinstock(Double.parseDouble(v.get(21).toString()));
				item.setMaxstock(Double.parseDouble(v.get(22).toString()));
				item.setHppnval(Double.parseDouble(v.get(23).toString()));
				item.setHppnval1(Double.parseDouble(v.get(24).toString()));
				item.setHppkval(v.get(25).toString());
				item.setHppkval1(v.get(26).toString());
				
				item.setRecstatus(v.get(27).toString());
				item.setTglupdate(Long.parseLong(v.get(28).toString()));
				item.setUserupdate(v.get(29).toString());
				item.setMaxDisc(Double.parseDouble(v.get(30).toString()));
				item.setPtype(v.get(31).toString());
				items[i]=item;
			}
		}
		catch(Exception ex)
		{
			throw new DAException (ex.getLocalizedMessage());
		}
		
		return items;
	}
	
	public boolean insertProduk(sf.inventory.Produk produk) throws DAException
	{
		if(produk.checkIsNULL())
		{
			throw new DAException(produk.getErr());
		}
		
		String strSQL="INSERT INTO " +  (produk.getCompanyType().equals("EPP") ? "mproduk" : "wproduk") +" values (?,?,?,?,?,?,?,?,?,?," +
												  "?,?,?,?,?,?,?,?,?,?," +
												  "?,?,?,?,?,?,?,?,?,?,?,?)";
		try {
			PreparedStatement p=db.getStatement(strSQL);
			p.setString(1, produk.getKbarang());
			p.setString(2, produk.getNbarang());
			p.setString(3, produk.getSatuan());
			p.setString(4, produk.getPstatus());
			p.setString(5, produk.getStockbal());
			
			p.setString(6, produk.getKrak());
			p.setString(7, produk.getKbarang1());
			p.setString(8, produk.getKbarangp());
			p.setString(9, produk.getDesc1());
			p.setString(10, produk.getDesc2());
			p.setString(11, produk.getDesc3());
			p.setString(12, produk.getDesc4());
			p.setString(13, produk.getDesc5());
			p.setString(14, produk.getDesc6());
			p.setString(15, produk.getDesc7());
			p.setString(16, produk.getDesc8());
			p.setString(17, produk.getDesc9());
			p.setString(18, produk.getDesc10());
			p.setString(19, produk.getKgroup());
			p.setString(20, produk.getKgroup1());
			p.setString(21, produk.getKgroup2());
			p.setDouble(22, produk.getMinstock());
			p.setDouble(23, produk.getMaxstock());
			p.setDouble(24, produk.getHppnval());
			p.setDouble(25, produk.getHppnval1());
			p.setString(26, produk.getHppkval());
			p.setString(27, produk.getHppkval1());
			
			p.setString(28, produk.getRecstatus());
			p.setLong(29, produk.getTglupdate());
			p.setString(30, produk.getUserupdate());
			p.setDouble(31, produk.getMaxDisc());
			p.setString(32, produk.getPtype());
			return db.execute(p);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			throw new DAException(e.getMessage());
		}
	}
	
	public boolean updateProduk(sf.inventory.Produk produk) throws DAException
	{
		if(produk.checkIsNULL())
		{
			throw new DAException(produk.getErr());
		}
		
		String strSQL="UPDATE " +   (produk.getCompanyType().equals("EPP") ? "mproduk" : "wproduk") + " SET nbarang=?,satuan=?,pstatus=?,stockbal=?,krak=?," +
				"kbarang1=?,kbarangp=?,desc1=?,desc2=?,desc3=?,desc4=?,desc5=?,desc6=?,desc7=?," +
				"desc8=?,desc9=?,desc10=?,kgroup=?,kgroup1=?,kgroup2=?,minstock=?,maxstock=?," +
				"hppnval=?,hppnval1=?,hppkval=?,hppkval1=?,recstatus=?,tglupdate=?,userupdate=?,maxdisc=?,ptype=? where kbarang=?";
		try {
			PreparedStatement p=db.getStatement(strSQL);
			p.setString(1, produk.getNbarang());
			p.setString(2, produk.getSatuan());
			p.setString(3, produk.getPstatus());
			p.setString(4, produk.getStockbal());
			p.setString(5, produk.getKrak());
			p.setString(6, produk.getKbarang1());
			p.setString(7, produk.getKbarangp());
			p.setString(8, produk.getDesc1());
			p.setString(9, produk.getDesc2());
			p.setString(10, produk.getDesc3());
			p.setString(11, produk.getDesc4());
			p.setString(12, produk.getDesc5());
			p.setString(13, produk.getDesc6());
			p.setString(14, produk.getDesc7());
			p.setString(15, produk.getDesc8());
			p.setString(16, produk.getDesc9());
			p.setString(17, produk.getDesc10());
			p.setString(18, produk.getKgroup());
			p.setString(19, produk.getKgroup1());
			p.setString(20, produk.getKgroup2());
			p.setDouble(21, produk.getMinstock());
			p.setDouble(22, produk.getMaxstock());
			p.setDouble(23, produk.getHppnval());
			p.setDouble(24, produk.getHppnval1());
			p.setString(25, produk.getHppkval());
			p.setString(26, produk.getHppkval1());
			
			p.setString(27, produk.getRecstatus());
			p.setLong(28, produk.getTglupdate());
			p.setString(29, produk.getUserupdate());
			p.setDouble(30, produk.getMaxDisc());
			p.setString(31, produk.getPtype());
			p.setString(32, produk.getKbarang());
			
			return db.execute(p);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			throw new DAException(e.getMessage());
		}
	}
	
	public boolean deleteProduk(String kproduk,String cmpType) throws DAException
	{
		String strSQL="DELETE FROM " +  (cmpType.equals("EPP") ? "mproduk" : "wproduk") + " where kbarang=?";
		try {
			PreparedStatement p=db.getStatement(strSQL);
			p.setString(1, kproduk);
			return db.execute(p);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			throw new DAException(e.getMessage());
		}
	}
	
}
